<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Copyright 2015 Caique Rodrigues Marques

/*!
Este arquivo do Uppaal tem como objetivo simular o problema
da barreira com a solução em semáforos. O problema consiste em 
dados n processos e em um certo momento do código, os processos
que ali chegarem tem de esperar os outros tambem chegarem ao 
ponto, numa barreira, onde, após o último processo chegar neste
ponto, todos os processos podem continuar o percurso.

Esta simulação é baseada no seguinte algoritmo de solução do
problema da barreira:
----------------------------------------------------------------
1  |int nProcess = n; //Numero de processos			|
2  |								|
3  |mutex.wait();						|
4  |count = count + 1; //Seção crítica				|
5  |								|
6  |if (count == nProcess) {					|
7  |	mutex.signal();						|
8  |	barrier.signal(nProcess);				|
9  |} else {							|
10 |	mutex.signal();						|
11 |	barrier.wait();						|
12 |}								|
-----------------------------------------------------------------

Nota: Esta simulação foi feita com o auxílio da ferramenta Uppaal 
(http://www.uppaal.com/), versão 4.0.14 (revisão 5615) - maio de 2014.
*/

const int iterations = 3; //!&lt; Number of iterations
const int semaphores = 2; //!&lt; Number of semaphores
const int nProcess = 4; //!&lt; Number of processes
int count = 0; //!&lt; Counter to verify the last process
int pass = 0;  //!&lt; Compare with count-1 to release the process waiting in the queue

typedef int[0, nProcess-1] id_p;

const int N = nProcess; //!&lt; Semaphore needs a constant 'N'
const int m = 0; //!&lt; For mutex semaphore
const int b = 1; //!&lt; For barrier semaphore

chan semWait[semaphores][nProcess];
chan semGo[semaphores][nProcess];
chan semSignal[semaphores][nProcess];</declaration><template><name x="5" y="5">Process</name><parameter>const id_p pid</parameter><declaration>int[0,iterations] i = 0;  //!&lt; Number of interations completed</declaration><location id="id0" x="-272" y="80"></location><location id="id1" x="-72" y="80"><name x="-56" y="72">waiting</name></location><location id="id2" x="-272" y="-8"><name x="-344" y="-16">notifyAll</name></location><location id="id3" x="-72" y="-8"></location><location id="id4" x="-72" y="-104"><name x="-56" y="-112">else</name></location><location id="id5" x="-176" y="-168"><name x="-160" y="-176">testCondition</name></location><location id="id6" x="-272" y="-104"><name x="-344" y="-112">goAway</name></location><location id="id7" x="-176" y="-256"><name x="-160" y="-264">criticalRegion</name></location><location id="id8" x="-176" y="-416"></location><location id="id9" x="-176" y="-336"><name x="-160" y="-344">turnstile</name></location><location id="id10" x="-688" y="-416"><name x="-744" y="-424">done</name></location><location id="id11" x="-424" y="-416"><name x="-440" y="-448">start</name></location><init ref="id11"/><transition><source ref="id0"/><target ref="id11"/><label kind="assignment" x="-456" y="-176">i++</label><nail x="-424" y="80"/></transition><transition><source ref="id2"/><target ref="id2"/><label kind="guard" x="-224" y="-24">pass &lt; count-1</label><label kind="synchronisation" x="-224" y="-8">semSignal[b][pid]!</label><label kind="assignment" x="-224" y="8">pass := pass + 1</label><nail x="-224" y="24"/><nail x="-224" y="-16"/></transition><transition><source ref="id2"/><target ref="id0"/><label kind="guard" x="-392" y="24">pass == count-1</label><label kind="assignment" x="-344" y="40">count = 0</label></transition><transition><source ref="id1"/><target ref="id0"/><label kind="synchronisation" x="-224" y="80">semGo[b][pid]?</label></transition><transition><source ref="id3"/><target ref="id1"/><label kind="synchronisation" x="-64" y="8">semWait[b][pid]!</label></transition><transition><source ref="id6"/><target ref="id2"/><label kind="synchronisation" x="-408" y="-72">semSignal[m][pid]!</label><label kind="assignment" x="-344" y="-56">pass = 0</label></transition><transition><source ref="id4"/><target ref="id3"/><label kind="synchronisation" x="-64" y="-72">semSignal[m][pid]!</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="-120" y="-152">count &lt; nProcess</label></transition><transition><source ref="id5"/><target ref="id6"/><label kind="guard" x="-344" y="-160">count == nProcess</label></transition><transition><source ref="id7"/><target ref="id5"/><label kind="assignment" x="-168" y="-224">count := count + 1</label></transition><transition><source ref="id11"/><target ref="id10"/><label kind="guard" x="-616" y="-432">i &gt;= iterations</label></transition><transition><source ref="id11"/><target ref="id8"/><label kind="guard" x="-344" y="-432">i &lt; iterations</label></transition><transition><source ref="id10"/><target ref="id10"/><nail x="-680" y="-464"/><nail x="-712" y="-464"/></transition><transition><source ref="id9"/><target ref="id7"/><label kind="synchronisation" x="-168" y="-304">semGo[m][pid]?</label></transition><transition><source ref="id8"/><target ref="id9"/><label kind="synchronisation" x="-168" y="-384">semWait[m][pid]!</label></transition></template><template><name>Semaphore</name><parameter>const int id,  const int queue_size, const int init_val</parameter><declaration>//The value of the semaphore
int count = init_val;
//The queue of the semaphore
//value -1 denotes an empty array entry
int[-1,N-1] queue[queue_size];
//An auxiliary variable used to temporarily store process id
meta int[0,N-1] q;

void initialize ()
{
  for (i : int[0,queue_size-1])
      {queue[i] = -1;}
}

void deQueue ()
{
  for (i : int[1,queue_size-1])
    queue[i-1] = queue[i];
  queue[queue_size-1] = -1;
}

void enQueue (int p)
{
  int i = 0;
  while (queue[i]&gt;=0){i++;};
  queue[i]=p;
}

int[0,N-1] headQueue ( )
{
  return queue[0];
}

bool fullQueue ( )
{
  for (i : int[0,queue_size-1])
   {
     if (queue[i]==-1) {return false;}
   }
  return true;
}</declaration><location id="id12" x="384" y="64"><committed/></location><location id="id13" x="608" y="320"><committed/></location><location id="id14" x="352" y="96"><name x="288" y="64">overflow</name></location><location id="id15" x="480" y="192"></location><init ref="id12"/><transition><source ref="id12"/><target ref="id15"/><label kind="assignment" x="408" y="72">initialize()</label></transition><transition><source ref="id15"/><target ref="id15"/><label kind="select" x="272" y="192">p:int[0,N-1]</label><label kind="guard" x="272" y="208">count&gt;=0</label><label kind="synchronisation" x="272" y="224">semSignal[id][p]?</label><label kind="assignment" x="272" y="240">count++</label><nail x="352" y="192"/><nail x="352" y="224"/></transition><transition><source ref="id15"/><target ref="id13"/><label kind="select" x="552" y="104">p:int[0,N-1]</label><label kind="guard" x="552" y="120">count&gt;0</label><label kind="synchronisation" x="552" y="136">semWait[id][p]?</label><label kind="assignment" x="552" y="152">count--,
q=p</label><nail x="608" y="192"/></transition><transition><source ref="id15"/><target ref="id14"/><label kind="select" x="248" y="112">p:int[0,N-1]</label><label kind="guard" x="248" y="128">count&lt;=0 &amp;&amp; fullQueue()</label><label kind="synchronisation" x="248" y="144">semWait[id][p]?</label></transition><transition><source ref="id13"/><target ref="id15"/><label kind="synchronisation" x="512" y="208">semGo[id][q]!</label></transition><transition><source ref="id15"/><target ref="id13"/><label kind="select" x="360" y="280">p:int[0,N-1]</label><label kind="guard" x="360" y="296">count&lt;0</label><label kind="synchronisation" x="360" y="312">semSignal[id][p]?</label><label kind="assignment" x="360" y="328">count++,
q=headQueue(),
deQueue()</label><nail x="480" y="320"/></transition><transition><source ref="id15"/><target ref="id15"/><label kind="select" x="480" y="-24">p:int[0,N-1]</label><label kind="guard" x="480" y="-8">count&lt;=0 &amp;&amp; not fullQueue()</label><label kind="synchronisation" x="480" y="8">semWait[id][p]?</label><label kind="assignment" x="480" y="24">count--,
enQueue(p)</label><nail x="480" y="64"/><nail x="512" y="64"/></transition></template><system>// Place template instantiations here.

mutex = Semaphore(0, nProcess-1, 1);
barrier = Semaphore(1, nProcess-1, 0);

system Process, mutex, barrier;</system></nta>