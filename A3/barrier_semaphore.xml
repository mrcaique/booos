<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// 2015 Caique Rodrigues Marques

/* 
-----------------------[English]-----------------------------------------------------
This file aims to simulate the problem of the barrier, which consists 
of n workers and a coordinator. Given the coordinator's signal, n workers
begin to work and conclude the service, waiting for the next task.

Upon completion of the task by the last worker, the coordinator will give 
a new start signal to workers who were waiting for a new service and, when 
all complete, the coordinator will give a new signal and so on.

The solution is based on the following algorithm:
-------------------------------------------------------------------------------------
 int nProcess = n; // Number of worker processess

 Worker(int pid) {
	while(i &lt; iterations) {
		mutex.wait();
		// work
		mutex.signal();
		
		finish.signal();
		barrier.wait();
		// Wait next service
	}
 }

 Coordinator() {
	while(i &lt; iterations) {
		for (int i = 0; i &lt; nProcess; i++) { finish.wait(); }
		for (int i = 0; i &lt; nProcess; i++) { barrier.signal(); }
	}
 }
-------------------------------------------------------------------------------------
Notes:
1)This simulation was performed with the aid of Uppaal tool (http://www.uppaal.org/),
version 4.0.14 (revision 5615) - may 2014.

2) The implementation of Semaphore template as well as their local declarations are not
of my own. The template it is authored by Frits Vaandrager from Radboud University 
Nijmegen (http://cs.ru.nl/~fvaan/PC/uppaal/semaphores.html).


#######################################################################################


-----------------------[Português do Brasil]-----------------------------------------
Este arquivo tem como objetivo simular o problema
da barreira, que consiste em n trabalhadores (worker) e um coor-
denador (coordinator). Dado o sinal do coordenador, n trabalhadores 
começam a trabalhar e concluem o serviço, esperando a próxima tarefa.
 
Após a conclusão da tarefa pelo último trabalhador, o coordenador dará
um novo sinal de início de trabalho aos trabalhadores que estavam esperando
por um novo serviço e, quando todos concluírem, o coordenador dará um novo
sinal e assim sucessivamente.

A solução do problema da barreira é baseada no seguinte algoritmo:
-------------------------------------------------------------------------------------
 int nProcess = n; // Número de processos trabalhadores
 
 class Worker {
	Worker(int pid) {
		while(i &lt; iterations) {
			mutex.wait();
			//Trabalho
			mutex.signal();
			
			finish.signal();
			barrier.wait();
			// Espera próximo serviço
		}
	}
 }

 class Coordinator {
	Coordinator() {
		while(i &lt; iterations) {
			for (int i = 0; i &lt; nProcess; i++) { finish.wait(); }
			for (int i = 0; i &lt; nProcess; i++) { barrier.signal(); }
		}
	}
 }
-------------------------------------------------------------------------------------

Notas: 
1) Esta simulação foi feita com o auxílio da ferramenta Uppaal (http://www.uppaal.com/),
versão 4.0.14 (revisão 5615) - maio de 2014.

2) A implementação do template Semaphore assim como as suas declaraçoes locais não são
de minha autoria. O template é de autoria de Frits Vaandrager da Radboud University 
Nijmegen (http://cs.ru.nl/~fvaan/PC/uppaal/semaphores.html).

#######################################################################################

*/

const int iterations = 5; //!&lt; Number of iterations
const int semaphores = 2;//!&lt; Number of semaphores
const int nProcess = 4; //!&lt; Number of processes workers

int finish = 0;  //!&lt; Warning that the workers finished work
int actual = 0; //!&lt; Actual iteration (for synchronization)

typedef int[0, nProcess-1] id_p; //!&lt; Workers' ID

const int N = nProcess; //!&lt; Semaphore needs a constant 'N'
const int m = 0; //!&lt; For mutex semaphore
const int b = 1; //!&lt; For barrier semaphore

chan semWait[semaphores][nProcess];
chan semGo[semaphores][nProcess];
chan semSignal[semaphores][nProcess];</declaration><template><name x="5" y="5">Worker</name><parameter>const id_p pid</parameter><declaration>int [0,iterations] i = 0; //!&lt; Number of iterations finished</declaration><location id="id0" x="64" y="-368"><name x="48" y="-400">done</name></location><location id="id1" x="-120" y="-8"><name x="-104" y="-16">waitingForNextWork2</name></location><location id="id2" x="-120" y="-104"><name x="-104" y="-112">waitingForNextWork</name></location><location id="id3" x="-120" y="-200"><name x="-104" y="-208">criticalRegion</name></location><location id="id4" x="-120" y="-288"><name x="-104" y="-296">waitingForDoWork</name></location><location id="id5" x="-120" y="-368"><name x="-136" y="-400">start</name></location><init ref="id5"/><transition><source ref="id0"/><target ref="id0"/><nail x="112" y="-392"/><nail x="112" y="-392"/><nail x="112" y="-344"/></transition><transition><source ref="id5"/><target ref="id0"/><label kind="guard" x="-96" y="-384">i &gt;= iterations</label></transition><transition><source ref="id1"/><target ref="id1"/><nail x="-144" y="24"/><nail x="-144" y="24"/><nail x="-104" y="24"/></transition><transition><source ref="id3"/><target ref="id2"/><label kind="synchronisation" x="-112" y="-152">semSignal[m][pid]!</label><label kind="assignment" x="-112" y="-168">finish++</label></transition><transition><source ref="id1"/><target ref="id5"/><label kind="synchronisation" x="-280" y="-128">semGo[b][pid]?</label><label kind="assignment" x="-280" y="-144">i++</label><nail x="-288" y="-8"/><nail x="-288" y="-368"/></transition><transition><source ref="id2"/><target ref="id1"/><label kind="synchronisation" x="-112" y="-64">semWait[b][pid]!</label></transition><transition><source ref="id4"/><target ref="id3"/><label kind="synchronisation" x="-112" y="-256">semGo[m][pid]?</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="-112" y="-328">i == actual-1 and i &lt; iterations</label><label kind="synchronisation" x="-112" y="-344">semWait[m][pid]!</label></transition></template><template><name>Semaphore</name><parameter>const int id,  const int queue_size, const int init_val</parameter><declaration>//The value of the semaphore
int count = init_val;
//The queue of the semaphore
//value -1 denotes an empty array entry
int[-1,N-1] queue[queue_size];
//An auxiliary variable used to temporarily store process id
meta int[0,N-1] q;

void initialize ()
{
  for (i : int[0,queue_size-1])
      {queue[i] = -1;}
}

void deQueue ()
{
  for (i : int[1,queue_size-1])
    queue[i-1] = queue[i];
  queue[queue_size-1] = -1;
}

void enQueue (int p)
{
  int i = 0;
  while (queue[i]&gt;=0){i++;};
  queue[i]=p;
}

int[0,N-1] headQueue ( )
{
  return queue[0];
}

bool fullQueue ( )
{
  for (i : int[0,queue_size-1])
   {
     if (queue[i]==-1) {return false;}
   }
  return true;
}</declaration><location id="id6" x="384" y="64"><committed/></location><location id="id7" x="608" y="320"><committed/></location><location id="id8" x="352" y="96"><name x="288" y="64">overflow</name></location><location id="id9" x="480" y="192"></location><init ref="id6"/><transition><source ref="id6"/><target ref="id9"/><label kind="assignment" x="408" y="72">initialize()</label></transition><transition><source ref="id9"/><target ref="id9"/><label kind="select" x="272" y="192">p:int[0,N-1]</label><label kind="guard" x="272" y="208">count&gt;=0</label><label kind="synchronisation" x="272" y="224">semSignal[id][p]?</label><label kind="assignment" x="272" y="240">count++</label><nail x="352" y="192"/><nail x="352" y="224"/></transition><transition><source ref="id9"/><target ref="id7"/><label kind="select" x="552" y="104">p:int[0,N-1]</label><label kind="guard" x="552" y="120">count&gt;0</label><label kind="synchronisation" x="552" y="136">semWait[id][p]?</label><label kind="assignment" x="552" y="152">count--,
q=p</label><nail x="608" y="192"/></transition><transition><source ref="id9"/><target ref="id8"/><label kind="select" x="248" y="112">p:int[0,N-1]</label><label kind="guard" x="248" y="128">count&lt;=0 &amp;&amp; fullQueue()</label><label kind="synchronisation" x="248" y="144">semWait[id][p]?</label></transition><transition><source ref="id7"/><target ref="id9"/><label kind="synchronisation" x="512" y="208">semGo[id][q]!</label></transition><transition><source ref="id9"/><target ref="id7"/><label kind="select" x="360" y="280">p:int[0,N-1]</label><label kind="guard" x="360" y="296">count&lt;0</label><label kind="synchronisation" x="360" y="312">semSignal[id][p]?</label><label kind="assignment" x="360" y="328">count++,
q=headQueue(),
deQueue()</label><nail x="480" y="320"/></transition><transition><source ref="id9"/><target ref="id9"/><label kind="select" x="480" y="-24">p:int[0,N-1]</label><label kind="guard" x="480" y="-8">count&lt;=0 &amp;&amp; not fullQueue()</label><label kind="synchronisation" x="480" y="8">semWait[id][p]?</label><label kind="assignment" x="480" y="24">count--,
enQueue(p)</label><nail x="480" y="64"/><nail x="512" y="64"/></transition></template><template><name>Coordinator</name><declaration>int [0,iterations] i = 0; //!&lt; Number of iterations finished
int pass = 0;  //!&lt; Number of workers processes to do the work</declaration><location id="id10" x="48" y="-416"><name x="32" y="-400">done</name></location><location id="id11" x="-120" y="-64"></location><location id="id12" x="-120" y="-152"><name x="-264" y="-160">releaseNextWork2</name></location><location id="id13" x="-120" y="-248"><name x="-104" y="-256">releaseNextWork</name></location><location id="id14" x="-120" y="-344"><name x="-104" y="-352">waitingWorkersFinish</name></location><location id="id15" x="-120" y="-416"><name x="-144" y="-448">start</name></location><init ref="id15"/><transition><source ref="id10"/><target ref="id10"/><nail x="88" y="-440"/><nail x="88" y="-392"/></transition><transition><source ref="id15"/><target ref="id10"/><label kind="guard" x="-96" y="-432">i &gt;= iterations</label></transition><transition><source ref="id11"/><target ref="id15"/><label kind="assignment" x="-280" y="-240">i++</label><nail x="-288" y="-64"/><nail x="-288" y="-416"/></transition><transition><source ref="id12"/><target ref="id12"/><label kind="guard" x="-72" y="-176">pass &lt; nProcess</label><label kind="synchronisation" x="-72" y="-160">semSignal[b][0]!</label><label kind="assignment" x="-72" y="-144">pass++</label><nail x="-80" y="-168"/><nail x="-80" y="-168"/><nail x="-80" y="-128"/></transition><transition><source ref="id12"/><target ref="id11"/><label kind="guard" x="-112" y="-112">pass == nProcess</label></transition><transition><source ref="id13"/><target ref="id12"/><label kind="assignment" x="-112" y="-216">pass = 0</label></transition><transition><source ref="id14"/><target ref="id13"/><label kind="guard" x="-112" y="-312">finish == nProcess</label><label kind="assignment" x="-112" y="-296">finish = 0</label></transition><transition><source ref="id15"/><target ref="id14"/><label kind="guard" x="-112" y="-400">i &lt; iterations</label><label kind="assignment" x="-112" y="-384">actual++</label></transition></template><system>mutex = Semaphore(0, nProcess-1, 1);
barrier = Semaphore(1, nProcess, 0);

system Coordinator, Worker, mutex, barrier;</system></nta>